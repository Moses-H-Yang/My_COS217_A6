Nicholas Nguyen and Moses Yang 

// 2.1 The Memory Map of the Text Section 

// Prolog
0x4007c4 <readString>:       stp     x19, x20, [sp, #-80]!
0x4007c8 <readString+4>:     stp     x21, x30, [sp, #16]

// First loop setup
0x4007cc <readString+8>:     mov     x19, #0x0                       // #0 
// above line is i = 0
0x4007d0 <readString+12>:    adrp    x21, 0x420000 <__libc_start_main@got.plt>

// First loop 
0x4007d4 <readString+16>:    mov     w20, w19             //  w20 = 0 
0x4007d8 <readString+20>:    ldr     x0, [x21, #72]        // c ?
0x4007dc <readString+24>:    bl      0x400640 <fgetc@plt> // line 19
0x4007e0 <readString+28>:    add     x19, x19, #0x1       // i++
0x4007e4 <readString+32>:    cmp     w0, #0xa             // compare c to '\n'
0x4007e8 <readString+36>:    ccmn    w0, #0x1, #0x4, ne  // compare c to EOF
0x4007ec <readString+40>:    b.eq    0x400800 <readString+60>  // break
0x4007f0 <readString+44>:    add     x1, sp, #0x20  // making 4 bytes of space for the 
buf char array
0x4007f4 <readString+48>:    add     x1, x19, x1  // buf += buf + i 
0x4007f8 <readString+52>:    sturb   w0, [x1, #-1] // buf[i] = c
0x4007fc <readString+56>:    b       0x4007d4 <readString+16>

// buf[i] = '\0'
0x400800 <readString+60>:    add     x0, sp, #0x20
0x400804 <readString+64>:    strb    wzr, [x0, w20, sxtw]

// Second loop setup 
0x400808 <readString+68>:    mov     x0, #0x1                        // #1
0x40080c <readString+72>:    adrp    x3, 0x420000 <__libc_start_main@got.plt>
0x400810 <readString+76>:    add     x3, x3, #0x58  // name 

// Second loop
0x400814 <readString+80>:    add     x1, x3, x0   // buf = name + i 
0x400818 <readString+84>:    add     x2, sp, #0x20
0x40081c <readString+88>:    add     x2, x0, x2
0x400820 <readString+92>:    ldurb   w2, [x2, #-1]
0x400824 <readString+96>:    sturb   w2, [x1, #-1]
0x400828 <readString+100>:   add     x0, x0, #0x1
0x40082c <readString+104>:   cmp     x0, #0x31  // i < 48
0x400830 <readString+108>:   b.ne    0x400814 <readString+80>  // b.any

// Epilog and return 
0x400834 <readString+112>:   ldp     x21, x30, [sp, #16]
0x400838 <readString+116>:   ldp     x19, x20, [sp], #80
0x40083c <readString+120>:   ret

// Prolog 
0x400840 <getName>:  str     x30, [sp, #-16]!

// printf("What is your name?\n");
0x400844 <getName+4>:        adrp    x0, 0x400000
0x400848 <getName+8>:        add     x0, x0, #0x8f8
0x40084c <getName+12>:       bl      0x400670 <puts@plt>

// readString();
0x400850 <getName+16>:       bl      0x4007c4 <readString>

// Epilog and return 
0x400854 <getName+20>:       ldr     x30, [sp], #16
0x400858 <getName+24>:       ret

// Prolog 
0x40085c <main>:     stp     x19, x30, [sp, #-16]!

// mprotect(...);
0x400860 <main+4>:   adrp    x19, 0x420000 <__libc_start_main@got.plt>
0x400864 <main+8>:   add     x19, x19, #0x58
0x400868 <main+12>:  mov     w2, #0x7                        // #7
0x40086c <main+16>:  mov     x1, #0x1                        // #1
0x400870 <main+20>:  and     x0, x19, #0xfffffffffffff000
0x400874 <main+24>:  bl      0x4006a0 <mprotect@plt>

// getName(); 
0x400878 <main+28>:  bl      0x400840 <getName>

// if (strcmp(name, "Andrew Appel") != 0) skip assignment to grade 
0x40087c <main+32>:  adrp    x1, 0x400000
0x400880 <main+36>:  add     x1, x1, #0x910
0x400884 <main+40>:  mov     x0, x19
0x400888 <main+44>:  bl      0x400680 <strcmp@plt>
0x40088c <main+48>:  cbnz    w0, 0x40089c <main+64>

// grade = 'B';
0x400890 <main+52>:  adrp    x0, 0x420000 <__libc_start_main@got.plt>
0x400894 <main+56>:  mov     w1, #0x42                       // #66
0x400898 <main+60>:  strb    w1, [x0, #68]

// printf("%c is your grade.\n", grade);
0x40089c <main+64>:  adrp    x0, 0x420000 <__libc_start_main@got.plt>
0x4008a0 <main+68>:  ldrb    w1, [x0, #68]
0x4008a4 <main+72>:  adrp    x0, 0x400000
0x4008a8 <main+76>:  add     x0, x0, #0x920
0x4008ac <main+80>:  bl      0x400690 <printf@plt>

// printf("Thank you, %s.\n", name)
0x4008b0 <main+84>:  adrp    x1, 0x420000 <__libc_start_main@got.plt>
0x4008b4 <main+88>:  add     x1, x1, #0x58
0x4008b8 <main+92>:  adrp    x0, 0x400000
0x4008bc <main+96>:  add     x0, x0, #0x938
0x4008c0 <main+100>: bl      0x400690 <printf@plt>

// Epilog and return 0 
0x4008c4 <main+104>: mov     w0, #0x0                        // #0
0x4008c8 <main+108>: ldp     x19, x30, [sp], #16
0x4008cc <main+112>: ret

// 2.1 The Memory Map of the Data Section 

Address  | Content | Description 
0x420044 | 0x44    | grade variable which is set to 'D'

// 2.3 The Memory Map of the BSS Section 

Address  | Description 
0x420058 | name[0]  N
0x420059 | name[1]  i
0x42005A | name[2]  c
0x42005B | name[3]  h
0x42005C | name[4]  o
0x42005D | name[5]  l
0x42005E | name[6]  a
0x42005F | name[7]  s
0x420060 | name[8]
0x420061 | name[9]  N
0x420062 | name[10] g
0x420063 | name[11] u
0x420064 | name[12] y
0x420065 | name[13] e
0x420066 | name[14] n
0x420067 | name[15] \0

// 2.4 The Memory Map of the Stack Section 

offset | Description 
0      | x19  : 
8      | x20  : 
16     | x21  : 
24     | x30  : readString() return address back to getName()
32     | buf  : 0-7, 8 byte increment 
40     | buf  : 8-15, my name would finish here 
48     | buf  : 16-23
56     | buf  : 24-31 
64     | buf  : 32-39
72     | buf  : 40-47
80     | x30  : getName() return address back to main()

